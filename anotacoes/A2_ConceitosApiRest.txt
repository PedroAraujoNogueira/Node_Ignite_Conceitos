API = Application Programming Interface(Interface de programação de aplicativos)
API é a camada que não fica diretamente acessível para o usuário final, mas é
o programa que o frontend usa para carregar os valores dinâmicamente na tela.

API REST:
1. Representation State Transfer (Transferência Representacional de Estado)
2. É um Modelo de Arquitetura, que possui conceitos e regras.
Regras:
1. Client-server. De um lado temos o cliente e de outro temos o 
servidor(normalmente uma API).
2. Stateless. Ou seja o cliente pode fazer quantas requisições quiser para o servidor,
porém o servidor não armazena nenhum estado das requisições, então em toda nova 
requisição precisamos passar novamente todas as informações necessárias para o servidor.
3. Cache. Nossa API/servidor precisa ter suporte para Cache. Não necessariamente precisa ter Cache
implementado, mas precisa ter suporte para caso um dia precisemos implementar. O Cache tem 
o objetivo de devolver uma resposta com uma velocidade maior e normalmente é usado para 
ações que são frequentemente pedidas. 
Por exemplo: a quantidade de cursos de uma plataforma, pois esse numero demora para mudar e 
como cada cliente precisa receber essa informação faz sentidos temos um cache dela para 
que possamos devolver essa informação mais rapidamente.
4. Interface Uniforme. Também conhecido como Contrato. Nela vamos ter:
4.1. A identificação dos recursos como por exemplo: http://correios.com.br/frete
4.2. Representação dos recursos. O formato como a mensagem vai ser 
entregue(JSON, XML, HTML e etc).
4.3. Mapeamento dos possíveis retornos, de preferência com mensagens descritivas
5. Camadas. Nossa aplicação precisa permitir que existam camadas entre o client e o 
server como por exemplo balanceamento de carga ou uma camada de segurança.
6. Código Sob Demanda.